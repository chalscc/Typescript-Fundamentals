#!/bin/bash

COMMIT_MSG_FILE="${1}"

# Set default branches to skip
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP="master develop"
fi

# Get the current branch name
BRANCH_NAME="$(git symbolic-ref --short HEAD)"

# Extract TEST-<number> pattern from the branch name, if exists
BRANCH_ID="$(echo "$BRANCH_NAME" | sed -n 's/.*\(TEST-[0-9]\+\).*/[\1]/p')"

# Ensure BRANCH_ID is not empty before continuing
if [ -z "$BRANCH_ID" ]; then
  echo "No valid BRANCH_ID found in branch name: $BRANCH_NAME"
  exit 0  # Exit if no BRANCH_ID is found
fi

# Remove everything before the slash in the branch name, if any
BRANCH_NAME="${BRANCH_NAME##*/}"

# Function to check if the branch is excluded
is_branch_excluded() {
  result=0
  for branch in ${BRANCHES_TO_SKIP}; do
    if [ "$branch" = "$BRANCH_NAME" ]; then
      result=1
    fi
  done
  echo $result
}

# Function to check if the branch ID is already in the commit message
is_branch_in_commit_msg() {
  # Ensure we have a valid commit message file
  if [ ! -f "$COMMIT_MSG_FILE" ]; then
    echo "Commit message file does not exist."
    return 1
  fi
  
  # Check if the first line contains the BRANCH_ID
  head -1 "$COMMIT_MSG_FILE" | grep -c --regexp="^${1}.*$"
}

# Debugging outputs
echo "BRANCH_NAME: $BRANCH_NAME"
echo "BRANCH_ID: $BRANCH_ID"

# Only modify the commit message if all conditions are met
if [ -n "$BRANCH_NAME" ] && ! [ "$(is_branch_excluded "$BRANCH_NAME")" -eq 1 ] && \
! [ "$(is_branch_in_commit_msg "$BRANCH_ID")" -eq 1 ]; then
  echo "Modifying commit message..."
  sed -i'.bak' -e "1s~^~${BRANCH_ID} ~" "$COMMIT_MSG_FILE"
else
  echo "No modification needed."
fi
