#!/bin/bash

COMMIT_MSG_FILE="${1}"

# Function to check if the branch is in a list
is_branch_in_list() {
  local branch="$1"
  local branch_list=("${@:2}")
  
  for b in "${branch_list[@]}"; do
    if [[ "$branch" == "$b" ]]; then
      return 0  # Found in the list
    fi
  done
  
  return 1  # Not found in the list
}

# Default branches to skip (excluded branches)
BRANCHES_TO_SKIP=("master" "develop" "preproduction")

# Default allowed branch types
ALLOWED_BRANCHES=("epic" "feature" "bugfix" "hotfix")

# Get the current branch name
BRANCH_NAME="$(git symbolic-ref --short HEAD)"

# Check if the branch is in the excluded list
if is_branch_in_list "$BRANCH_NAME" "${BRANCHES_TO_SKIP[@]}"; then
  echo "-"
  echo "No commits are allowed on excluded branch: $BRANCH_NAME"
  exit 0
fi

# Check if the branch is one of the allowed types (e.g. feature/ or bugfix/)
BRANCH_TYPE="$(echo "$BRANCH_NAME" | cut -d '/' -f 1)"
if ! is_branch_in_list "$BRANCH_TYPE" "${ALLOWED_BRANCHES[@]}"; then
  echo "Invalid branch type: $BRANCH_TYPE. Must be one of: ${ALLOWED_BRANCHES[*]}"
  exit 0
fi

# Extract TEST-<number> pattern from the branch name, if exists
BRANCH_ID="$(echo "$BRANCH_NAME" | sed -n 's/.*\(TEST-[0-9]\+\).*/[\1]/p')"

# Ensure BRANCH_ID is not empty
if [ -z "$BRANCH_ID" ]; then
  echo "No valid BRANCH_ID found in branch name: $BRANCH_NAME"
  echo "Branch name must contain {feature|bugfix|epic}/TEST-{number}"
  exit 0  # Exit if no BRANCH_ID is found
fi

# Only modify the commit message if all conditions are met
if [ -n "$BRANCH_ID" ]; then
  sed -i'.bak' -e "1s~^~${BRANCH_ID} ~" "$COMMIT_MSG_FILE"
fi
