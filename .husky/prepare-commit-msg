#!/bin/bash

COMMIT_MSG_FILE="${1}"

# Function to check if the branch is excluded
is_branch_excluded() {
  result=0
  for branch in ${BRANCHES_TO_SKIP}; do
    if [ "$branch" = "$BRANCH_NAME" ]; then
      result=1
    fi
  done
  echo $result
}

# Set default branches to skip
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP="master develop preproduction"
fi

# Get the current branch name
BRANCH_NAME="$(git symbolic-ref --short HEAD)"

# Extract TEST-<number> pattern from the branch name, if exists
BRANCH_ID="$(echo "$BRANCH_NAME" | sed -n 's/.*\(TEST-[0-9]\+\).*/[\1]/p')"

if [ "$(is_branch_excluded "$BRANCH_NAME")" -eq 1 ]; then
  echo "No valid branch to commit: $BRANCH_NAME";

  exit 0;
fi

# Ensure BRANCH_ID is not empty before continuing
if [ -z "$BRANCH_ID" ]; then
  echo "No valid BRANCH_ID found in branch name: $BRANCH_NAME"
  echo "Branch name must contain feature|bugfix|epic/TEST-{number}"
  
  exit 0  # Exit if no BRANCH_ID is found
fi

# Remove everything before the slash in the branch name, if any
BRANCH_NAME="${BRANCH_NAME##*/}"

# Only modify the commit message if all conditions are met
if [ -n "$BRANCH_NAME" ] && ! [ "$(is_branch_excluded "$BRANCH_NAME")" -eq 1 ]; then
  sed -i'.bak' -e "1s~^~${BRANCH_ID} ~" "$COMMIT_MSG_FILE"
fi
